require './lib/lt_base.rb'
require './lib/util/redis_server.rb'
require 'irb'

## AR 4: The following section allows us to run AR w/out Rails
# Overwrite the already existing Rake task "load_config"
class Rake::Task
  def overwrite(&block)
    @actions.clear
    enhance(&block)
  end
end

# Load the ActiveRecord tasks
spec = Gem::Specification.find_by_name("activerecord")
load File.join(spec.gem_dir, "lib", "active_record", "railties", "databases.rake")

# Overwrite the load config 
Rake::Task["db:load_config"].overwrite do
  Rake::Task[:'lt:boot'].invoke
end

# AR Migrations need an environment with an already established database connection
task :environment => ["db:load_config"] do
end
## End AR 4 installation


desc 'Default does nothing at the moment - just used to check if rake compiles'
task :default do
  puts "Default task does nothing at this time."
end

task :full_tests do
  Rake::Task[:'lt:test:run_full_tests'].invoke
end

task :tests do
  Rake::Task[:'lt:test:run_tests'].invoke
end

task :console do
  Rake::Task[:'lt:console'].invoke
end


namespace :lt do
  namespace :webapp do
    desc "Run WebApp tests"
    task :run_tests do
      ENV['RAILS_ENV'] = 'test'
      LT::setup_environment(File::dirname(__FILE__))
      LT::boot_db(File::expand_path('./db/config.yml'))
      LT::run_test('webapp_test.rb', File::expand_path('./test'))
    end
    desc "Boot WebApp environment"
    task :boot do
      Rake::Task[:'lt:boot'].invoke
    end
    desc "Run WebApp server - this starts the webserver"
    task :start do 
      path = File::expand_path(File::dirname(__FILE__))
      rackup_file = File::join(path, 'lib', 'webapp.ru')
      # TODO - set port/server from environment var
      run_cmd = "rackup -p 8080 -o localhost #{rackup_file}"
      $stdout.sync = true
      Kernel.system(run_cmd)
    end
    desc "Run WebApp server - this starts the webserver in dev mode with rerun"
    task :start_dev do 
      path = File::expand_path(File::dirname(__FILE__))
      rackup_file = File::join(path, 'lib', 'webapp.ru')
      # TODO - set port/server from environment var
      run_cmd = "rerun -- rackup -p 8080 -o localhost #{rackup_file}"
      $stdout.sync = true
      Kernel.system(run_cmd)
    end
  end # namespace :webapp

  namespace :janitors do
    desc "Run Redis to Postgres extractor"
    task :redis_postgres_extract do

      LT::boot_all
      require './lib/janitors/redis_postgres_extract.rb'
      LT::Janitors::RedisPostgresExtract.extract
    end
  end # namespace :janitors

  desc "Boot up a console with required context"
  task :console => [:boot] do
    IRB.setup nil
    IRB.conf[:MAIN_CONTEXT] = IRB::Irb.new.context
    require 'irb/ext/multi-irb'
    IRB.irb nil, self
  end

  desc "Boot Core-app system"
  task :boot do
    LT::boot_all(File::dirname(__FILE__))
  end

  desc "Install all gems via bundle"
  task :bundle_install => [:'lt:boot'] do
    output = `bundle install`
    LT::logger.info(output)
  end

  desc "Seed environment db with data (generally speaking, don't do this in testing env)"
  task :seed => [:'lt:boot', :'db:seed']

  namespace :test do
    desc "Run complete test suite include DB teardown/rebuild/reseed"
    task :run_full_tests => [:'lt:test:boot', :'db:full_reset'] do
      Rake::Task[:'lt:bundle_install'].invoke
      LT::logger.info("Test setup complete. Running all tests.")
      LT::run_tests
    end
    
    desc "Run complete test suite w/out DB reset"
    task :run_tests => [:'lt:test:boot', 
      :'lt:test:db:migrate_tables'] do
      LT::run_tests
    end

    desc "Run single test file"
    task :run_test, [:testfile] => [:'lt:test:boot', 
      :'lt:test:db:migrate_tables'] do |t, args|
      filename = args[:testfile]
      LT::run_test(filename, LT::test_path)
    end

    task :boot do
      # Force us into testing environment, then boot core-app
      ENV['RAILS_ENV'] = 'test'
      Rake::Task[:'lt:boot'].invoke
      LT::testing!
    end
    namespace :db do
      desc "Drop and recreate test db, run migrations"
      task :full_reset => [:'lt:boot', :drop_db, :create_db, :migrate_tables] do
        LT::logger.info("Performing full DB testing reset")
      end
      desc "Drop test db"
      task :drop_db do
        ## BUG: If DB can't be dropped, this command does not raise an exception
        ##      It only prints a screen warning which is easy to miss
        ## Rec: Raise exception if DB exists after dropping?
        LT::testing!
        LT::logger.info("Dropping testing DB")
        Rake::Task[:'db:drop'].invoke
      end
      task :create_db do
        LT::testing!
        LT::logger.info("Creating testing DB")
        Rake::Task[:'db:create'].invoke
      end
      task :migrate_tables do
        LT::testing!
        LT::logger.info("Migrating testing DB")
        Rake::Task[:'db:migrate'].invoke
      end
    end
  end # test namesapce
end # lt namespace


