/*
 * collector.js
 *
 * Copyright 2014 Learning Tapestry, Inc.
 * All rights reserved
 *
*/

// if someone has already loaded jQuery, make sure their version is still
// available as default after we load the version we need
(function(){
  var script = document.createElement('script');
  script.type = "text/javascript";
  script.src = "//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js";
  script.onload = function () {
    window.ltG = {};
    // private functions (in name only - just namespaced to make clear they are internal)
    window.ltG.priv = {};
    window.lt$ = jQuery.noConflict( true );
    window.ltG.orgApiKey = "<%=org_api_key%>";
    window.ltG.userId = "<%=user_id%>";
    window.ltG.assert_end_point = "<%=assert_end_point%>";

    window.ltG.toISOString = function(dateObj) {
      function pad(number) {
        var r = String(number);
        if ( r.length === 1 ) {
          r = '0' + r;
        }
        return r;
      };

      return dateObj.getUTCFullYear()
        + '-' + pad( dateObj.getUTCMonth() + 1 )
        + '-' + pad( dateObj.getUTCDate() )
        + 'T' + pad( dateObj.getUTCHours() )
        + ':' + pad( dateObj.getUTCMinutes() )
        + ':' + pad( dateObj.getUTCSeconds() )
        + 'Z';
    };
    // Generate a PageView message suitable for sending via fSendMsg
    window.ltG.fGenPageViewMsg = function(uRL, pageTitle, timeOnPage) {
      var verb = 'viewed';
      action = window.ltG.priv.fGenActionBaseMsg(pageTitle, verb);
      action["time"] = timeOnPage;
      return window.ltG.priv.fGenRawMsg(uRL, pageTitle, verb, action);
    };

    window.ltG.fGenClickMsg = function(uRL, pageTitle) {
      var verb = 'clicked';
      action = window.ltG.priv.fGenActionBaseMsg(pageTitle, verb);
      return window.ltG.priv.fGenRawMsg(uRL, pageTitle, verb, action);
    }

    // generate a PageView message and send to server
    window.ltG.fSendPageViewMsg = function() {
      var timeOnPage = window.ltG.fGetResetTimeOnPage();
      var uRL = window.ltG.priv.fGetCurURL();
      var pageTitle = window.ltG.priv.fGetCurPageTitle();
      var msg = window.ltG.fGenPageViewMsg(uRL, pageTitle, timeOnPage);
      window.ltG.priv.fSendMsg(msg);
    };

    // generate a Click message and send to server
    window.ltG.fSendClickMsg = function() {
      var uRL = window.ltG.priv.fGetCurURL();
      var pageTitle = window.ltG.priv.fGetCurPageTitle();
      var msg = window.ltG.fGenClickMsg(uRL, pageTitle);
      window.ltG.priv.fSendMsg(msg);
    };
    
    window.ltG.fStartPageTimer = function() {
      window.ltG.priv.timerStartDate = new Date();
    };

    window.ltG.fPausePageTimer = function() {
      //window.ltG.timerPauseDate = new Date();
      // not yet implemented
    };

    window.ltG.fUnPausePageTimer = function () {
      //not yet implemented
    }

    // returns duration since timer start and restarts timer at 0
    // see fCalcDateDifference for return value format (e.g. "129S")
    window.ltG.fGetResetTimeOnPage = function () {
      var currentDate = new Date();    
      var startDate = window.ltG.priv.timerStartDate;
      var retVal = window.ltG.fCalcDateDifference(currentDate, startDate);
      window.ltG.fStartPageTimer();
      return retVal;
    };

    // returns a string with interval difference between two dates in seconds
    // format: NNNS e.g., "129S"
    window.ltG.fCalcDateDifference = function(curDate, oldDate) {
      return (Math.floor((curDate - oldDate)/1000) + "S")
    };

    // ### private/utility functions ###

    window.ltG.priv.fGenActionBaseMsg = function(pageTitle, verb) {
      return {
        id: "verbs/"+verb,
        display: {"en-US": verb},
        page_title: pageTitle,
        user_agent: navigator.userAgent
      };
    };

    window.ltG.priv.fGetCurURL = function(){
      return window.location.href
    }

    window.ltG.priv.fGetCurPageTitle = function(){
      return lt$(document).find("title").text();
    }

    window.ltG.priv.fSendMsg = function(msg){
      window.lt$.ajax({
        url: window.ltG.assert_end_point,
        type: "POST",
        data: JSON.stringify(msg),
        headers: {"X_LT_ORG_API_KEY": msg.org_api_key},
        contentType:"application/json; charset=utf-8",
        success: function(){
          //nothing at this time on success
        },
        error: function(jqxhr,error){
          console.log("fSendMsg JS failed.");
          console.log(jqxhr.responseText);
          console.log(jqxhr.statusText)
        }
      });
    };

    window.ltG.priv.fGenRawMsg = function(uRL, pageTitle, verb, action) {
      msg = {
        org_api_key: window.ltG.orgApiKey,
        username: ltG.userId,
        verb: verb,
        url: uRL,
        page_title: pageTitle,
        captured_at: ltG.toISOString(new Date(lt$.now()))
      };
      msg.action = action;
      return msg;
    };

    // utility/debug function to inspect variables/objects content
    window.ltG.priv.inspect = function(obj, maxLevels, level)
      {
        var str = '', type, msg;

          // Start Input Validations
          // Don't touch, we start iterating at level zero
          if(level == null)  level = 0;

          // At least you want to show the first level
          if(maxLevels == null) maxLevels = 1;
          if(maxLevels < 1)     
              return 'Error: Levels number must be > 0';

          // We start with a non null object
          if(obj == null)
          return 'Error: Object *NULL*\n';
          // End Input Validations

          // Each Iteration must be indented
          str += '  ';

          // Start iterations for all objects in obj
          for(var property in obj)
          {
            try
            {
                // Show "property" and "type property"
                type =  typeof(obj[property]);
                str += '* (' + type + ') ' + property + 
                       ( (obj[property]==null)?(': *null*'):(''))+'\n';

                // We keep iterating if this property is an Object, non null
                // and we are inside the required number of levels
                if((type == 'object') && (obj[property] != null) && (level+1 < maxLevels))
                str += inspect(obj[property], maxLevels, level+1);
            }
            catch(err)
            {
              // Are there some properties in obj we can't access? Print it red.
              if(typeof(err) == 'string') msg = err;
              else if(err.message)        msg = err.message;
              else if(err.description)    msg = err.description;
              else                        msg = 'Unknown';

              str += '* (Error) ' + property + ': ' + msg + '\n';
            }
          }

            // Close indent
            str += '\n';

          return str;
      }
    // ***********************
    // main event handler code
    // ***********************
    window.lt$( document ).ready(function() {
      window.ltG.fSendClickMsg();
      window.ltG.fStartPageTimer();
      //start timer that we are on page
      //hook document focus/blur events to manage timer
      lt$(function() {
          lt$(window).focus(function() {
              console.log('Focus');
          });

          lt$(window).blur(function() {
              console.log('Blur');
          });
      });
      //hook document unload event to send timer data: "pageview" event
      lt$( window ).unload(function() {
        console.log("Unload");
        window.ltG.fSendPageViewMsg();
      });
    }); // document.ready
  };
  document.getElementsByTagName('head')[0].appendChild(script);
})();



