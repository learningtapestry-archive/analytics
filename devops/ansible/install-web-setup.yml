---
  # run: 
  #   ssh-agent bash
  #   ssh-add ./secrets/id_deploy
  #   ansible-playbook -i [lt_env]-hosts.rb --ask-sudo-pass install-web-setup.yml 
  # sudo password is for user deploy
  - hosts: web
    remote_user: deploy
    sudo: yes
    vars:
      ansible_ssh_host: "{{inventory_hostname}}.learningtapestry.com"
      ansible_ssh_user: deploy
      ansible_ssh_private_key_file: ./secrets/id_deploy
    tasks: 
    - name: Web | Install required packages
      action: apt pkg={{ item }} state=installed update_cache=true
      with_items:
        - postgresql-client-9.3
        - libpq-dev
        - redis-server
        - libssl-dev
        - libyaml-dev
        - libreadline-dev
        - openssl
        - curl
        - zlib1g-dev
        - bison
        - libxml2-dev
        - libxslt1-dev
        - libcurl4-gnutls-dev
        - apt-transport-https
        - ca-certificates

    - shell: which ruby && echo "exists" || echo "not installed"
      register: ruby_installed
    - name: Install lastest 1.9.3 Ruby if no ruby installed (this is slow..)
      shell: wget http://cache.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p551.tar.gz
      args: 
        chdir: /tmp
      when: ruby_installed.stdout.find('exists') == -1
    - shell: tar xzf ruby-1.9.3-p551.tar.gz
      args: 
        chdir: /tmp
      when: ruby_installed.stdout.find('exists') == -1
    - shell: ./configure && make && sudo make install
      args: 
        chdir: /tmp/ruby-1.9.3-p551
      when: ruby_installed.stdout.find('exists') == -1

    - name: Alter nobody user to belong to www-data group
      user: >
        name=nobody
        state=present
        groups=www-data

    - name: permanently set environment variable RAILS_ENV
      lineinfile: >
        state=present
        dest=/etc/profile.d/ruby_environment.sh
        create=yes
        insertafter=EOF
        line='export RAILS_ENV={{lt_env}}\nexport RACK_ENV={{lt_env}}'
    - lineinfile: >
        state=present
        dest=/home/{{item}}/.bashrc
        insertafter=EOF
        line='export RAILS_ENV={{lt_env}}\nexport RACK_ENV={{lt_env}}'
      with_items: 
        - lt_admin
        - deploy

    - name:  Allow port 443 with UFW in production
      ufw: rule=allow port=443 proto=tcp
      when: lt_env == 'production'

    - name:  Allow port 80 with UFW in staging
      ufw: rule=allow port=80 proto=tcp
      when: lt_env == 'staging' 

    - include: fragment-install-ci-web-setup.yml
      when: lt_env == 'test'

