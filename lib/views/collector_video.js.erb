var sessionId = guid();

// YouTube
var tag = document.createElement('script');
var eventDate = new Date();
var done = false;
tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

// HTML5 video
trackHTML5Videos();
checkExistingYoutubeVideo();

function guid() {
  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
  }

  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
}

function onYouTubeIframeAPIReady() {
  var iframes = document.getElementsByTagName('iframe');

  for (var i = 0; i < iframes.length; i++) {
    if (iframes[i].src.indexOf('youtube.com') !== -1) {
      var player = new YT.Player(iframes[i], {
        autoplay: false,
        events: {
          'onReady': onYouTubePlayerReady,
          'onStateChange': onPlayerStateChange
        }
      });
    }
  }
}

function onYouTubePlayerReady(event) {
//  event.target.playVideo();
}


function onPlayerStateChange(event) {
  var newStateWord = '';

  if (event.data == 5) {
    newStateWord = 'video cued';
  }
  else if (event.data == 3) {
    newStateWord = 'buffering';
  }
  else if (event.data == 2) {
    newStateWord = 'paused';
  }
  else if (event.data == 1) {
    newStateWord = 'playing';
  }
  else if (event.data == 0) {
    newStateWord = 'ended';
  }
  else if (event.data == -1) {
    newStateWord = 'unstarted';
  }
  else {
    newStateWord = 'Status uncertain';
  }

  if (event.data != -1 && event.data != 3 && event.data != 5) { // don't send unstarted and buffering events
    sendMessage(newStateWord, event.target.getVideoUrl());
  }
}

function trackHTML5Videos() {
  var videos = document.getElementsByTagName("video");
  for (var i = 0; i < videos.length; i++) {
    ['playing', 'pause', 'ended'].forEach(function (eventType) {
      videos[i].addEventListener(eventType, function (e) {
        var url = e.target.currentSrc.match(/^https?/) ? e.target.currentSrc : e.target.baseURI;
        sendMessage(eventType, url);
      }, true);
    });
  }
}

// This function is only useful when injecting the scripts via the chrome extension.
// In this case, we can not control the order in which the tracking scripts are added and we might miss the initial
// 'playing' event, so we make the chrome extension set a boolean flag to inform the video tracking script.
function checkExistingYoutubeVideo() {
  if (window.ltG === undefined) {
    setTimeout(checkExistingYoutubeVideo, 250);
  } else {
    if (typeof LearnTap !== 'undefined' && LearnTap.videoIsPlaying) {
      sendMessage('playing', LearnTap.videoUrl);
    }
  }
}

function sendMessage(state, videoUrl) {
  console.log("Player's new state: " + state + " " + eventDate + " " + videoUrl);

  var url = window.ltG.priv.fGetCurURL();
  var pageTitle = window.ltG.priv.fGetCurPageTitle();

  var action = {
    verb: 'video_action',
    state: state,
    username: ltG.userId,
    url: url,
    video_id: videoUrl,
    page_title: pageTitle,
    captured_at: ltG.toISOString(new Date(lt$.now())),
    session_id: sessionId
  };

  var msg = window.ltG.priv.fGenRawMsg(url, pageTitle, 'video_action', action);
  window.ltG.priv.fSendMsg(msg);
}
