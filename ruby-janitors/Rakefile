require 'active_record'
require 'logger'
require 'pg'
require 'yaml'
require './lib/lt_base.rb'
require 'standalone_migrations'
StandaloneMigrations::Tasks.load_tasks

desc 'Default does nothing at the moment - just used to check if rake compiles'
task :default do
  puts "Default task does nothing at this time."
end

task :full_tests do
  Rake::Task[:'lt:janitor:test:run_full_tests'].invoke
end

task :tests do
  Rake::Task[:'lt:janitor:test:run_tests'].invoke
end



namespace :lt do
  namespace :janitor do
    desc "Boot Janitor system"
    task :boot => [:'boot:set_env', :'boot:setup_logger', :'boot:boot_janitor_db', :'boot:load_all_models'] do
      LT::Janitor::logger.info("Janitor booted")
    end
    desc "Seed environment db with data (generally speaking, don't do this in testing env)"
    task :seed => [:'lt:janitor:boot', :'db:seed']

    namespace :test do
      desc "Run complete test suite include DB teardown/rebuild/reseed"
      task :run_full_tests => [:'lt:janitor:test:boot', :'db:full_reset'] do
        LT::Janitor::logger.info("Test setup complete. Running all tests.")
        LT::Janitor::run_tests
      end
      
      desc "Run complete test suite w/out DB reset"
      task :run_tests => [:'lt:janitor:test:boot', 
        :'lt:janitor:test:db:migrate_tables'] do
        LT::Janitor::run_tests
      end

      desc "Run single test file"
      task :run_test, [:testfile] => [:'lt:janitor:test:boot', 
        :'lt:janitor:test:db:migrate_tables'] do |t, args|
        filename = args[:testfile]
        LT::run_test(filename, LT::Janitor::test_path)
      end

      task :boot do
        # Force us into testing environment, then boot janitor
        ENV['RAILS_ENV'] = 'test'
        Rake::Task[:'lt:janitor:boot'].invoke
        LT::testing!
      end
      namespace :db do
        desc "Drop and recreate test db, run migrations"
        task :full_reset => [:'lt:janitor:boot', :drop_db, :create_db, :migrate_tables] do
          LT::Janitor::logger.info("Performing full DB testing reset")
        end
        desc "Drop test db"
        task :drop_db do
          ## BUG: If DB can't be dropped, this command does not raise an exception
          ##      It only prints a screen warning which is easy to miss
          ## Rec: Raise exception if DB exists after dropping?
          LT::testing!
          LT::Janitor::logger.info("Dropping testing DB")
          Rake::Task[:'db:drop'].invoke
        end
        task :create_db do
          LT::testing!
          LT::Janitor::logger.info("Creating testing DB")
          Rake::Task[:'db:create'].invoke
        end
        task :migrate_tables do
          LT::testing!
          LT::Janitor::logger.info("Migrating testing DB")
          Rake::Task[:'db:migrate'].invoke
        end
      end
    end # test namesapce

    # holds all our bootup tasks
    namespace :boot do
      
      desc "Setup janitor logger"
      task :setup_logger do
        LT::Janitor.init_logger
      end

      desc "Define the environment we are running in (prod, test, dev)"
      task :set_env do
        LT::setup_environment(File::dirname(__FILE__))
      end
      
      desc "Load all AR models from ./lib/model"
      task :load_all_models do
        LT::load_all_models
      end

      desc "Establish connection to janitor database"
      task :boot_janitor_db do
        LT::boot_db(File::expand_path('./db/config.yml'))
      end # boot_janitor_db
    end #boot namespace
  end # janitor namespace
end # lt namespace


